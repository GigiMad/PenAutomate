import customtkinter
import subprocess
import json
import os
from PIL import Image, ImageTk
from tkinter import filedialog

# Empêche la résolution automatique de Windows
customtkinter.deactivate_automatic_dpi_awareness()

# Chemin des images et des fichiers
icon_path = os.path.join("penautomate_images", "penautomate.ico")
save_path = os.path.join("penautomate_menu", "pentestreport", "results", "company_logo.png")
json_path = os.path.join("penautomate_menu", "pentestreport", "pentestdata.json")
next_path = os.path.join("penautomate_menu", "pentestreport", "pentestreportreco.py")
back_path = os.path.join("penautomate_menu", "menu2.py")

# Fenêtre root
root = customtkinter.CTk()
root.geometry("600x750")
root.title("PenAutomate")
root.iconbitmap(icon_path)
root.resizable(width=False, height=False)

# Centre la fenêtre au lancement
root.update_idletasks()
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
window_width = root.winfo_width()
window_height = root.winfo_height()
x_pos = (screen_width - window_width) // 2
y_pos = (screen_height - window_height) // 2
root.geometry("+{}+{}".format(x_pos, y_pos))    

# Importe la configuration du thème Light / Dark depuis le fichier themes.json
with open('themes.json', 'r') as file:
    config = json.load(file)

# Apparence du thème
customtkinter.set_appearance_mode(config["appearance_mode"])
customtkinter.set_default_color_theme("dark-blue")

# Fonctions du menu
# NEXT
def next():
    company_name = entry.get()

    if os.path.exists(json_path):
        with open(json_path, 'r') as json_file:
            data = json.load(json_file)
    else:
        data = {}

    # Mettre à jour les données de Company Name seulement si l'entry n'est pas vide
    if company_name.strip():  # Cette condition vérifie si company_name n'est pas vide ou ne contient pas que des espaces blancs
        data['Company Name'] = company_name

    # Enregistrer les données mises à jour dans le fichier JSON
    with open(json_path, 'w') as json_file:
        json.dump(data, json_file)

    # Fermer la fenêtre et exécuter le script suivant
    root.destroy()
    subprocess.run(["python", next_path])


# BACK
def back():
    root.destroy()
    subprocess.run(["python", back_path])

# COMPANY LOGO
def browse_logo():
    file_path = filedialog.askopenfilename(title="Select Company Logo", filetypes=[("Image files", "*.png;*.jpg;*.jpeg")])
    if file_path:
        # Charge l'image
        image = Image.open(file_path)

        # Redimensionne l'image à 300x300 px
        resized_image = image.resize((300, 300), Image.Resampling.LANCZOS)

        # Afficher l'image dans le label
        logo_image = ImageTk.PhotoImage(resized_image)
        logo_label.configure(image=logo_image)
        logo_label.image = logo_image  # Keep a reference, prevent garbage-collection

        # Sauvegarder l'image redimensionnée
        resized_image.save(save_path, "PNG")

# CHARGEMENT DES DONNES PRE-ENREGISTREES "COMPANY NAME"
def load_data():
    try:
        with open(json_path, 'r') as file:
            data = json.load(file)
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return {"Company Name": ""}
    
data = load_data()
placeholder_text = data["Company Name"] if data["Company Name"] else "Enter company name"

# CHARGEMENT DES DONNES PRE-ENREGISTREES "LOGO"
def display_saved_logo():
    if os.path.exists(save_path):
        logo = Image.open(save_path)
        logo = logo.resize((300, 300))
        logo_image = ImageTk.PhotoImage(logo)
        logo_label.configure(image=logo_image)
        logo_label.image = logo_image
    else:
        pass

# Frame du menu
frame = customtkinter.CTkFrame(master=root)
frame.pack(fill="y", expand=True, side="top")

# Titre de la frame
label = customtkinter.CTkLabel(master=frame, text="\U0001f47e   Start a Pentest Report with PenAutomate   \U0001f47e", font=("Lato", 24, "bold"))
label.pack(pady=12, padx=10)

# Description de la frame
label = customtkinter.CTkLabel(master=frame, text="Use this tool ethically for penetration testing. Conducting tests and generating reports on companies requires explicit agreement or consent from the entity. Users are solely responsible for compliance with laws and ethical standards.", font=("Lato", 10, "bold"), wraplength=400)
label.pack()

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=10, padx=10, anchor="center")

# Entry Company Name
label = customtkinter.CTkLabel(master=frame, text="Enter company name : ", font=("Lato", 16, "bold"))
label.pack(pady=10, padx=10, anchor="w")

entry = customtkinter.CTkEntry(master=frame, placeholder_text=placeholder_text)
entry.pack(pady=10, padx=10, anchor="w")

# Entry Logo
label = customtkinter.CTkLabel(master=frame, text="Enter company logo (300x300 recommended): ", font=("Lato", 16, "bold"))
label.pack(pady=10, padx=10, anchor="w")

logo_label = customtkinter.CTkLabel(master=frame, text="\n\n\n\n\n\n\n\n\n\n\n\n\n\n",font=("Lato", 16, "bold"))
logo_label.pack()

# Bouton "Browse" pour sélectionner le logo
browse_button = customtkinter.CTkButton(master=frame, text="Import", command=browse_logo)
browse_button.pack(pady=10, padx=10)

# Progress bar
progressbar = customtkinter.CTkProgressBar(master=frame, width=500)
progressbar.pack(pady=10, padx=10)
progressbar.set(0)

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=20, padx=10)

# BOUTON BACK
back_button = customtkinter.CTkButton(master=frame, text="Back", command=back, font=("Lato", 14, "bold"), fg_color="#A66520", hover_color="#8A541B")
back_button.pack(side="left", padx=15)

# BOUTON NEXT
next_button = customtkinter.CTkButton(master=frame, text="Next", command=next, font=("Lato", 14, "bold"), fg_color="#22B14C", hover_color="#1A873A")
next_button.pack(side="right", padx=15)

# Main Loop
display_saved_logo()
root.mainloop()
