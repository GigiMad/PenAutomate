import customtkinter
import subprocess
import json
import os
from PIL import Image, ImageTk
from tkinter import filedialog
from CTkMessagebox import CTkMessagebox

# Empêche la résolution automatique de Windows
customtkinter.deactivate_automatic_dpi_awareness()

# Chemin des images et des fichiers
icon_path = os.path.join("penautomate_images", "penautomate.ico")
save_path = os.path.join("penautomate_menu", "pentestreport", "company_logo.png")
json_path = os.path.join("penautomate_menu", "pentestreport", "pentestreport.json")
next_path = os.path.join("penautomate_menu", "pentestreport", "pentestreportreco.py")
back_path = os.path.join("penautomate_menu", "menu2.py")

# Fenêtre root
root = customtkinter.CTk()
root.geometry("600x750")
root.title("PenAutomate")
root.iconbitmap(icon_path)
root.resizable(width=False, height=False)

# Centre la fenêtre au lancement
root.update_idletasks()
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

window_width = root.winfo_width()
window_height = root.winfo_height()

x_pos = (screen_width - window_width) // 2
y_pos = (screen_height - window_height) // 2

root.geometry("+{}+{}".format(x_pos, y_pos))    

# Importe la configuration du thème Light / Dark depuis le fichier themes.json
with open('themes.json', 'r') as file:
    config = json.load(file)

# Apparence du thème
customtkinter.set_appearance_mode(config["appearance_mode"])
customtkinter.set_default_color_theme("dark-blue")

# Fonctions du menu
# NEXT
def next():
    company_name = entry.get()

    # Store the information in the JSON file
    data = {"company_name": company_name}

    with open(json_path, "w") as json_file:
        json.dump(data, json_file)
    
    root.destroy()
    subprocess.run(["python", next_path])


# BACK
def back():
    root.destroy()
    subprocess.run(["python", back_path])

# COMPANY NAME
def browse_logo():
    file_path = filedialog.askopenfilename(title="Select Company Logo", filetypes=[("Image files", "*.png;*.jpg;*.jpeg")])
    if file_path:
        # Charger l'image
        image = Image.open(file_path)

        # Redimensionner l'image à 300x300 pixels avec un filtre de haute qualité
        resized_image = image.resize((300, 300), Image.Resampling.LANCZOS)

        # Afficher l'image dans le label
        logo_image = ImageTk.PhotoImage(resized_image)
        logo_label.configure(image=logo_image)
        logo_label.image = logo_image  # Keep a reference, prevent garbage-collection

        # Sauvegarder l'image redimensionnée
        resized_image.save(save_path, "PNG")
        print(f"Logo file selected, resized, and saved: {save_path}")


# Fonction pour charger les données à partir du fichier JSON
def load_data():
    try:
        with open(json_path, 'r') as file:
            data = json.load(file)
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return {"company_name": ""}
    
data = load_data()

placeholder_text = data["company_name"] if data["company_name"] else "Enter company name"

# Fonction pour charger l'image de la company
def display_saved_logo():
    # Define the path to the saved logo
    logo_path = os.path.join("penautomate_menu", "pentestreport", "company_logo.png")
    # Load and resize the image to ensure it fits the designated area
    image = Image.open(logo_path)
    resized_image = image.resize((300, 300), Image.Resampling.LANCZOS)
    logo_image = ImageTk.PhotoImage(resized_image)
            
    # Set the image in the logo label
    logo_label.configure(image=logo_image)
    logo_label.image = logo_image  # Keep a reference, prevent garbage-collection


# Frame du menu
frame = customtkinter.CTkFrame(master=root)
frame.pack(fill="y", expand=True, side="top")

# Titre de la frame
label = customtkinter.CTkLabel(master=frame, text="\U0001f47e   Start a Pentest Report with PenAutomate   \U0001f47e", font=("Lato", 24, "bold"))
label.pack(pady=12, padx=10)

label = customtkinter.CTkLabel(master=frame, text="Use this tool ethically for penetration testing. Conducting tests and generating reports on companies requires explicit agreement or consent from the entity. Users are solely responsible for compliance with laws and ethical standards.", font=("Lato", 10, "bold"), wraplength=400)
label.pack()

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=10, padx=10, anchor="center")

label = customtkinter.CTkLabel(master=frame, text="Enter company name : ", font=("Lato", 16, "bold"))
label.pack(pady=10, padx=10, anchor="w")

entry = customtkinter.CTkEntry(master=frame, placeholder_text=placeholder_text)
entry.pack(pady=10, padx=10, anchor="w")


label = customtkinter.CTkLabel(master=frame, text="Enter company logo (300x300 recommended): ", font=("Lato", 16, "bold"))
label.pack(pady=10, padx=10, anchor="w")

# Label pour afficher le logo de la société (déclaré ici en tant que variable globale)
logo_label = customtkinter.CTkLabel(master=frame, text="\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",font=("Lato", 16, "bold"))
logo_label.pack()

# Bouton "Browse" pour sélectionner le logo
browse_button = customtkinter.CTkButton(master=frame, text="Import", command=browse_logo)
browse_button.pack(pady=10, padx=10)

# Progress bar
progressbar = customtkinter.CTkProgressBar(master=frame, width=500)
progressbar.pack(pady=10, padx=10)
progressbar.set(0)

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=20, padx=10)

# BOUTON BACK
back_button = customtkinter.CTkButton(master=frame, text="Back", command=back, font=("Lato", 14, "bold"), fg_color="#22B14C", hover_color="#1A873A")
back_button.pack(side="left", padx=15)

# BOUTON NEXT
next_button = customtkinter.CTkButton(master=frame, text="Next", command=next, font=("Lato", 14, "bold"), fg_color="#22B14C", hover_color="#1A873A")
next_button.pack(side="right", padx=15)

# Display the saved logo if it exists
display_saved_logo()

# Main Loop
root.mainloop()
