import customtkinter
import subprocess
import json
import os
from PIL import Image, ImageTk
import socket
from CTkMessagebox import CTkMessagebox

# Empêche la résolution automatique de Windows
customtkinter.deactivate_automatic_dpi_awareness()

# Chemin des images et des fichiers
icon_path = os.path.join("penautomate_images", "penautomate.ico")
back_path = os.path.join("penautomate_menu", "pentestreport", "pentestreportscan.py")
json_path = os.path.join("penautomate_menu", "pentestreport", "pentestdata.json")
next_path = os.path.join("penautomate_menu", "pentestreport", "pentestreportloading.py")

# Fenêtre root
root = customtkinter.CTk()
root.geometry("600x750")
root.title("PenAutomate")
root.iconbitmap(icon_path)
root.resizable(width=False, height=False)

# Centre la fenêtre au lancement
root.update_idletasks()
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
window_width = root.winfo_width()
window_height = root.winfo_height()
x_pos = (screen_width - window_width) // 2
y_pos = (screen_height - window_height) // 2
root.geometry("+{}+{}".format(x_pos, y_pos))    

# Importe la configuration du thème Light / Dark depuis le fichier themes.json
with open('themes.json', 'r') as file:
    config = json.load(file)

# Apparence du thème
customtkinter.set_appearance_mode(config["appearance_mode"])
customtkinter.set_default_color_theme("dark-blue")

# CHARGEMENT DES DONNES PRE-ENREGISTREES
if os.path.exists(json_path):
    with open(json_path, "r") as json_file:
        saved_data = json.load(json_file)
else:
    saved_data = {
        "Check for location": "off",
        "Subdomains Enumeration": "off",
        "Check for DNS Resolve": "off",
        "Email Scrapping": "off",
        "Social Media Scrapping": "off",
        "Company Domain": ""
    }

# Separate variables for each switch using saved settings
location_var = customtkinter.StringVar(value=saved_data["Check for location"])
subdomains_var = customtkinter.StringVar(value=saved_data["Subdomains Enumeration"])
dns_var = customtkinter.StringVar(value=saved_data["Check for DNS Resolve"])
email_var = customtkinter.StringVar(value=saved_data["Email Scrapping"])
sm_var = customtkinter.StringVar(value=saved_data["Social Media Scrapping"])

# Fonctions du menu
# NEXT
def next():
    # Préparation des données à sauvegarder
    new_data = {}
    fields = {
        "Check for location": location_var.get(),
        "Subdomains Enumeration": subdomains_var.get(),
        "Check for DNS Resolve": dns_var.get(),
        "Email Scrapping": email_var.get(),
        "Social Media Scrapping": sm_var.get()
    }
    
    # Liste des extensions de domaine valides
    valid_domains = ['.fr', '.net', '.com', '.org', '.info']  # Ajoutez d'autres domaines au besoin

    # Ajoute seulement les valeurs non vides au dictionnaire new_data
    for key, value in fields.items():
        if value.strip():  # Assurez-vous que value est une chaîne et qu'elle n'est pas vide
            if key == "Company Domain":
                if any(value.endswith(domain) for domain in valid_domains):
                    new_data[key] = value
                else:
                    CTkMessagebox(title="Invalid Domain", message="Company Domain must end with .fr, .net, .com, etc.")
                    return  # Arrête l'exécution de la fonction si le domaine n'est pas valide
            else:
                new_data[key] = value

    # Vérifie si le fichier existe et lit les données existantes, sinon crée un nouveau dictionnaire
    if os.path.exists(json_path):
        with open(json_path, "r") as json_file:
            data = json.load(json_file)
    else:
        data = {}

    # Mise à jour ou ajout de nouvelles données
    data.update(new_data)
    
    # Écriture des données mises à jour dans le fichier JSON
    with open(json_path, "w") as json_file:
        json.dump(data, json_file, indent=4)

    # Prochaine page
    root.destroy()
    subprocess.run(["python", next_path])

# BACK
def back():
    root.destroy()
    subprocess.run(["python", back_path])

# TOGGLE
def toggle_all_switches():
    new_state = "on" if check_var.get() == "on" else "off"
    location_var.set(new_state)
    subdomains_var.set(new_state)
    dns_var.set(new_state)
    email_var.set(new_state)
    sm_var.set(new_state)   

# Frame du menu
frame = customtkinter.CTkFrame(master=root)
frame.pack(fill="y", expand=True, side="top")

# Titre de la frame
label = customtkinter.CTkLabel(master=frame, text="\U0001f47e   Exploitation   \U0001f47e", font=("Lato", 24, "bold"))
label.pack(pady=12, padx=10)

label = customtkinter.CTkLabel(master=frame, text="The goal of system hacking is to gain access, escalate privileges, execute applications, and hide files.", font=("Lato", 10, "bold"), wraplength=400)
label.pack()

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=10, padx=10, anchor="center")


label = customtkinter.CTkLabel(master=frame, text="Perform automated exploitation/enumeration for Web services : ", font=("Lato", 16, "bold"))
label.pack(pady=10, padx=10, anchor="w")

sm_switch = customtkinter.CTkSwitch(frame, text=": Directory busting (+3 min)", font=("Lato", 16, "bold"), variable=sm_var, onvalue="on", offvalue="off")
sm_switch.pack(pady=10, padx=10, anchor="w")

dns_switch = customtkinter.CTkSwitch(frame, text=": Web Vulnerability detection", font=("Lato", 16, "bold"), variable=dns_var, onvalue="on", offvalue="off")
dns_switch.pack(pady=10, padx=10, anchor="w")

label = customtkinter.CTkLabel(master=frame, text="Perform automated exploitation if a common port is detected : ", font=("Lato", 16, "bold"))
label.pack(pady=10, padx=10, anchor="w")

# Configuration des switches
location_switch = customtkinter.CTkSwitch(frame, text=": Port 21 : Brute force FTP (~3 min)", font=("Lato", 16, "bold"), variable=location_var, onvalue="on", offvalue="off")
location_switch.pack(pady=10, padx=10, anchor="w")

subdomains_switch = customtkinter.CTkSwitch(frame, text=": Port 22 :  Brute force SSH (~3 min)", font=("Lato", 16, "bold"), variable=subdomains_var, onvalue="on", offvalue="off")
subdomains_switch.pack(pady=10, padx=10, anchor="w")

email_switch = customtkinter.CTkSwitch(frame, text=": Port 3306 :  SQL Injection", font=("Lato", 16, "bold"), variable=email_var, onvalue="on", offvalue="off")
email_switch.pack(pady=10, padx=10, anchor="w")

# Checkbox to toggle all switches
check_var = customtkinter.StringVar(value="off")
checkbox = customtkinter.CTkCheckBox(master=frame, text=": Toggle All", font=("Lato", 16, "bold"), variable=check_var, onvalue="on", offvalue="off", command=toggle_all_switches)
checkbox.pack(pady=10, padx=15,anchor="w")

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=10, padx=10)

label = customtkinter.CTkLabel(master=frame, text="Enter key words to create a custom wordlists for brute force (optional) : ", font=("Lato", 16, "bold"))
label.pack(pady=5, padx=10, anchor="w")

entry = customtkinter.CTkEntry(master=frame, placeholder_text="toto;tata;maman...")
entry.pack(pady=25, padx=10, anchor="w")

# Progress bar
progressbar = customtkinter.CTkProgressBar(master=frame, width=500)
progressbar.pack(pady=10, padx=10)
progressbar.set(0.90)

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=20, padx=10)

# BOUTON BACK
back_button = customtkinter.CTkButton(master=frame, text="Back", command=back, font=("Lato", 14, "bold"), fg_color="#22B14C", hover_color="#1A873A")
back_button.pack(side="left", padx=15)

# BOUTON NEXT
next_button = customtkinter.CTkButton(master=frame, text="Next", command=next, font=("Lato", 14, "bold"), fg_color="#22B14C", hover_color="#1A873A")
next_button.pack(side="right", padx=15)

# Main Loop
root.mainloop()
