import customtkinter
import subprocess
import json
import os
from PIL import Image, ImageTk
import socket


# Empêche la résolution automatique de Windows
customtkinter.deactivate_automatic_dpi_awareness()

# Chemin des images et des fichiers
icon_path = os.path.join("penautomate_images", "penautomate.ico")
json_path = os.path.join("penautomate_menu", "pentestreport", "pentestreport.json")
back_path = os.path.join("penautomate_menu", "pentestreport", "pentestreport.py")
json2_path = os.path.join("penautomate_menu", "pentestreport", "pentestdata.json")

# Fenêtre root
root = customtkinter.CTk()
root.geometry("600x750")
root.title("PenAutomate")
root.iconbitmap(icon_path)
root.resizable(width=False, height=False)

# Centre la fenêtre au lancement
root.update_idletasks()
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

window_width = root.winfo_width()
window_height = root.winfo_height()

x_pos = (screen_width - window_width) // 2
y_pos = (screen_height - window_height) // 2

root.geometry("+{}+{}".format(x_pos, y_pos))    

# Importe la configuration du thème Light / Dark depuis le fichier themes.json
with open('themes.json', 'r') as file:
    config = json.load(file)

# Apparence du thème
customtkinter.set_appearance_mode(config["appearance_mode"])
customtkinter.set_default_color_theme("dark-blue")

# Variables distinctes pour chaque switch
location_var = customtkinter.StringVar(value="off")
subdomains_var = customtkinter.StringVar(value="off")
dns_var = customtkinter.StringVar(value="off")
email_var = customtkinter.StringVar(value="off")
sm_var = customtkinter.StringVar(value="off")

# Fonctions du menu
# NEXT
def next():
    # Préparation des données à sauvegarder
    new_data = {
        "Check for location": location_var.get(),
        "Subdomains Enumeration": subdomains_var.get(),
        "Check for DNS Resolve": dns_var.get(),
        "Email Scrapping": email_var.get(),
        "Social Media Scrapping": sm_var.get()
    }
    
    # Vérifie si le fichier existe et lit les données existantes, sinon crée un nouveau dictionnaire
    if os.path.exists(json2_path):
        with open(json2_path, "r") as json_file:
            data = json.load(json_file)
    else:
        data = {}
    
    # Mise à jour ou ajout de nouvelles données
    data.update(new_data)
    
    # Écriture des données mises à jour dans le fichier JSON
    with open(json2_path, "w") as json_file:
        json.dump(data, json_file, indent=4)

# BACK
def back():
    root.destroy()
    subprocess.run(["python", back_path])

# Frame du menu
frame = customtkinter.CTkFrame(master=root)
frame.pack(fill="y", expand=True, side="top")

# Titre de la frame
label = customtkinter.CTkLabel(master=frame, text="\U0001f47e   Footprinting and Reconnaissance   \U0001f47e", font=("Lato", 24, "bold"))
label.pack(pady=12, padx=10)

label = customtkinter.CTkLabel(master=frame, text="Gather information and extract it from an organisation. Organisational information like employees, addresses, contacts, partners, etc. Network information like domains (DNS record), sub-domains, network topology, firewalls, IP addresses,etc and System information like OS, location of web servers, accounts and passwords. ", font=("Lato", 10, "bold"), wraplength=400)
label.pack()

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=10, padx=10, anchor="center")

label = customtkinter.CTkLabel(master=frame, text="Enter company domain : ", font=("Lato", 16, "bold"))
label.pack(pady=10, padx=10, anchor="w")

entry = customtkinter.CTkEntry(master=frame, placeholder_text="*.com ; *.fr ; *.net...")
entry.pack(pady=10, padx=10, anchor="w")

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=10, padx=10, anchor="center")

# Configuration des switches
location_switch = customtkinter.CTkSwitch(frame, text=": Check for location", font=("Lato", 16, "bold"), variable=location_var, onvalue="on", offvalue="off")
location_switch.pack(pady=10, padx=10, anchor="w")

subdomains_switch = customtkinter.CTkSwitch(frame, text=": Subdomains Enumeration", font=("Lato", 16, "bold"), variable=subdomains_var, onvalue="on", offvalue="off")
subdomains_switch.pack(pady=10, padx=10, anchor="w")

dns_switch = customtkinter.CTkSwitch(frame, text=": Check for DNS Resolve", font=("Lato", 16, "bold"), variable=dns_var, onvalue="on", offvalue="off")
dns_switch.pack(pady=10, padx=10, anchor="w")

email_switch = customtkinter.CTkSwitch(frame, text=": Email Scrapping", font=("Lato", 16, "bold"), variable=email_var, onvalue="on", offvalue="off")
email_switch.pack(pady=10, padx=10, anchor="w")

sm_switch = customtkinter.CTkSwitch(frame, text=": Social Media Scrapping", font=("Lato", 16, "bold"), variable=sm_var, onvalue="on", offvalue="off")
sm_switch.pack(pady=10, padx=10, anchor="w")

# Progress bar
progressbar = customtkinter.CTkProgressBar(master=frame, width=500)
progressbar.pack(pady=10, padx=10)
progressbar.set(0.10)

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=20, padx=10)

# BOUTON BACK
back_button = customtkinter.CTkButton(master=frame, text="Back", command=back, font=("Lato", 14, "bold"), fg_color="#22B14C", hover_color="#1A873A")
back_button.pack(side="left", padx=15)

# BOUTON NEXT
next_button = customtkinter.CTkButton(master=frame, text="Next", command=next, font=("Lato", 14, "bold"), fg_color="#22B14C", hover_color="#1A873A")
next_button.pack(side="right", padx=15)

# BOUTON SKIP
skip_button = customtkinter.CTkButton(master=frame, text="Skip", command=next, font=("Lato", 14, "bold"))
skip_button.pack(side="right", padx=15)

# Main Loop
root.mainloop()
