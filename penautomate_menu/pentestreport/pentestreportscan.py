import customtkinter
import subprocess
import json
import os
from PIL import Image, ImageTk
from CTkMessagebox import CTkMessagebox
import ipaddress
import socket

# Empêche la résolution automatique de Windows
customtkinter.deactivate_automatic_dpi_awareness()

# Chemin des images et des fichiers
icon_path = os.path.join("penautomate_images", "penautomate.ico")
json_path = os.path.join("penautomate_menu", "pentestreport", "pentestreport.json")
back_path = os.path.join("penautomate_menu", "pentestreport", "pentestreportreco.py")
json2_path = os.path.join("penautomate_menu", "pentestreport", "pentestdata.json")

# Fenêtre root
root = customtkinter.CTk()
root.geometry("600x750")
root.title("PenAutomate")
root.iconbitmap(icon_path)
root.resizable(width=False, height=False)

# Centre la fenêtre au lancement
root.update_idletasks()
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

window_width = root.winfo_width()
window_height = root.winfo_height()

x_pos = (screen_width - window_width) // 2
y_pos = (screen_height - window_height) // 2

root.geometry("+{}+{}".format(x_pos, y_pos))    

# Importe la configuration du thème Light / Dark depuis le fichier themes.json
with open('themes.json', 'r') as file:
    config = json.load(file)

# Apparence du thème
customtkinter.set_appearance_mode(config["appearance_mode"])
customtkinter.set_default_color_theme("dark-blue")

# Fonctions du menu
# NEXT
def next():
    # Préparation des données à sauvegarder
    x = {}

# BACK
def back():
    root.destroy()
    subprocess.run(["python", back_path])    

# Frame du menu
frame = customtkinter.CTkFrame(master=root)
frame.pack(fill="y", expand=True, side="top")

# Titre de la frame
label = customtkinter.CTkLabel(master=frame, text="\U0001f47e   Scanning Networks   \U0001f47e", font=("Lato", 24, "bold"))
label.pack(pady=12, padx=10)

label = customtkinter.CTkLabel(master=frame, text="Check active systems and open ports. Identify services running on active systems. Perform operating system banner/fingerprint capture. Identify network vulnerabilities", font=("Lato", 10, "bold"), wraplength=400)
label.pack()

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=10, padx=10, anchor="center")

label = customtkinter.CTkLabel(master=frame, text="Enter Private IP Addresses :", font=("Lato", 16, "bold"))
label.pack(pady=10, padx=10, anchor="w")

# Entry fields for IP addresses
ip_entries = [customtkinter.CTkEntry(master=frame, placeholder_text=f"IP Address {i+1}") for i in range(3)]
for entry in ip_entries:
    entry.pack(pady=5)

def save_ips():
    ip_data = {}
    at_least_one_filled = False
    
    for i, entry in enumerate(ip_entries, start=1):
        ip = entry.get()
        if ip:
            try:
                ip_obj = ipaddress.ip_address(ip)
                if ip_obj.is_private:
                    ip_data[f"IP{i}"] = ip
                    at_least_one_filled = True
                else:
                    CTkMessagebox(title="Error", message="This is not a private IP Address", icon="cancel")
            except ValueError:
                CTkMessagebox(title="Error", message="This is not a valid IP Address", icon="cancel")
    
    if at_least_one_filled:
        if os.path.exists(json2_path):
            with open(json2_path, "r+") as file:
                data = json.load(file)
                data.update(ip_data)
                file.seek(0)
                json.dump(data, file, indent=4)
        else:
            with open(json2_path, "w") as file:
                json.dump(ip_data, file, indent=4)


# Function to clear all IP addresses from the JSON file
def clear_ips():
    if os.path.exists(json2_path):
        with open(json2_path, "r+") as file:
            data = json.load(file)
            keys_to_remove = ['IP1', 'IP2', 'IP3']
            for key in keys_to_remove:
                data.pop(key, None)
            file.seek(0)
            file.truncate()  # Clear the file before writing back the modified data
            json.dump(data, file, indent=4)
            CTkMessagebox(title="Cleared", message="IPs cleared", icon="check")
            
def scan_ip():
    pass

# Save button
save_button = customtkinter.CTkButton(master=frame, text="Save IPs", command=save_ips)
save_button.pack(pady=10, padx=10)

# Clear IPs button
clear_button = customtkinter.CTkButton(master=frame, text="Clear IPs", command=clear_ips, fg_color="#A66520", hover_color="#8A541B")
clear_button.pack(pady=10, padx=10)

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=10, padx=10, anchor="center")

label = customtkinter.CTkLabel(master=frame, text="You don't have private IPs ? Let us scan your Network", font=("Lato", 16, "bold"))
label.pack(pady=10, padx=10, anchor="w")

scan_button = customtkinter.CTkButton(master=frame, text="Scan your Network", command=scan_ip)
scan_button.pack(pady=10, padx=10)

# Progress bar
progressbar = customtkinter.CTkProgressBar(master=frame, width=500)
progressbar.pack(pady=10, padx=10)
progressbar.set(0.30)

# Séparateur
label = customtkinter.CTkButton(master=frame, text="", width=550, hover=False, height=10, fg_color="#333")
label.pack(pady=20, padx=10)

# BOUTON BACK
back_button = customtkinter.CTkButton(master=frame, text="Back", command=back, font=("Lato", 14, "bold"), fg_color="#22B14C", hover_color="#1A873A")
back_button.pack(side="left", padx=15)

# BOUTON NEXT
next_button = customtkinter.CTkButton(master=frame, text="Next", command=next, font=("Lato", 14, "bold"), fg_color="#22B14C", hover_color="#1A873A")
next_button.pack(side="right", padx=15)

# BOUTON SKIP
skip_button = customtkinter.CTkButton(master=frame, text="Skip", command=next, font=("Lato", 14, "bold"))
skip_button.pack(side="right", padx=15)

# Main Loop
root.mainloop()
