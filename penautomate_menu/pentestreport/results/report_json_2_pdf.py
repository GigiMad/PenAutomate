import os
import json
from datetime import datetime
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image, PageTemplate, Frame
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch

def on_each_page(canvas, doc):
    canvas.saveState()
    canvas.setFont('Helvetica-Bold', 11)
    # Header
    canvas.drawString(inch, 10.75 * inch, "PenAutomate")
    canvas.drawRightString(7.5 * inch, 10.75 * inch, "Sup De Vinci")
    # Footer
    canvas.drawString(inch, 0.75 * inch, f"Page: {doc.page}")
    canvas.drawRightString(7.5 * inch, 0.75 * inch, f"{datetime.now().strftime('%Y-%m-%d')}")
    canvas.restoreState()

json_input_path = os.path.join("penautomate_menu", "pentestreport", "pentestdata.json")
json_input2_path = os.path.join("penautomate_menu", "pentestreport", "pentestreport.json")
json_input3_path = os.path.join("penautomate_menu", "pentestreport", "pentestreport2.json")
image_path = os.path.join("penautomate_menu", "pentestreport", "results", "company_logo.png")

# Charger les données JSON
with open(json_input_path, 'r') as file:
    company_data = json.load(file)

with open(json_input2_path, 'r') as file:
    report_data = json.load(file)

with open(json_input3_path, 'r') as file:
    vulnerability_data = json.load(file)    

# Créer un fichier PDF
pdf_report = SimpleDocTemplate("pentest_report.pdf", pagesize=letter)
pdf_report.onFirstPage = on_each_page
pdf_report.onLaterPages = on_each_page

flowables = []
styles = getSampleStyleSheet()

# Charger et configurer le logo
logo_img = Image(image_path, width=100, height=100)  

# Créer un tableau pour le logo et le titre
title = Paragraph(f"{company_data['Company Name']} - Pentest Report", styles['Title'])
header_table = Table([[logo_img, title]], colWidths=[100, 450], rowHeights=[100])
header_table.setStyle(TableStyle([
    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
    ('ALIGN', (0, 0), (0, 0), 'CENTER'), 
    ('ALIGN', (1, 0), (1, 0), 'LEFT'), 
    ('BOX', (0, 0), (-1, -1), 2, colors.black),  # Encadré autour de l'en-tête
    ('INNERGRID', (0, 0), (-1, -1), 0.5, colors.grey),  # Lignes internes si nécessaire
    ('BACKGROUND', (0, 0), (-1, -1), colors.white)  # Fond blanc pour l'en-tête
]))

flowables.append(header_table)
flowables.append(Spacer(1, 12))

# Ajouter un paragraphe introductif
intro_text = "This report was generated by PenAutomate, providing insights into security vulnerabilities and potential threats identified during the automated penetration testing process. It aims to help fortify the security posture by addressing the vulnerabilities discovered."
intro = Paragraph(intro_text, styles['BodyText'])
flowables.append(intro)
flowables.append(Spacer(1, 12))

# Ligne séparatrice utilisant une table vide
separator = Table([[""]], colWidths=[500], rowHeights=[2], style=[
    ('LINEABOVE', (0, 0), (-1, 0), 1, colors.black),
    ('BACKGROUND', (0, 0), (-1, 0), colors.black)
])
flowables.append(separator)
flowables.append(Spacer(1, 12))

# Ajouter un titre pour l'analyse de domaine
domain_analysis_title = f"1) Domain Analysis of {company_data['Company Domain']}"
domain_title = Paragraph(domain_analysis_title, styles['Heading1'])
flowables.append(domain_title)
flowables.append(Spacer(1, 12))

# Sous-section 1.1 Basic Information
basic_info_title = "1.1 Basic Information"
basic_info_heading = Paragraph(basic_info_title, styles['Heading2'])
flowables.append(basic_info_heading)
basic_data = [
    ["IP Address", report_data["ip_address"]],
    ["Hostname", report_data["hostname"]],
    ["City", report_data["city"]],
    ["Region", report_data["region"]],
    ["Country", report_data["country"]],
    ["Location", report_data["location"]],
    ["Organization", report_data["organization"]],
    ["Postal Code", report_data["postal"]],
    ["Timezone", report_data["timezone"]]
]
basic_table = Table(basic_data, style=TableStyle([
    ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
]))
flowables.append(basic_table)
flowables.append(Spacer(1, 12))

# Sous-section 1.2 Subdomains
subdomains_title = "1.2 Subdomains"
subdomains_heading = Paragraph(subdomains_title, styles['Heading2'])
flowables.append(subdomains_heading)
subdomain_data = [["Subdomain", "IP Address"]]
subdomain_data.extend([[sd["subdomain"], sd["ip"]] for sd in report_data["subdomain_details"]])
subdomains_table = Table(subdomain_data, style=TableStyle([
    ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
]))
flowables.append(subdomains_table)
flowables.append(Spacer(1, 12))

# Sous-section 1.3 Resolve DNS
dns_info_title = "1.3 Resolve DNS"
dns_info_heading = Paragraph(dns_info_title, styles['Heading2'])
flowables.append(dns_info_heading)
dns_records = [
    ["Type", "Value"],
    ["A", Paragraph(", ".join(report_data["A"]), styles['BodyText'])],
    ["NS", Paragraph(", ".join(report_data["NS"]), styles['BodyText'])],
    ["MX", Paragraph(", ".join(report_data["MX"]), styles['BodyText'])],
    ["SOA", Paragraph(report_data["SOA"][0], styles['BodyText'])],
    ["TXT", Paragraph(", ".join(report_data["TXT"]), styles['BodyText'])]
]
dns_table = Table(dns_records, colWidths=[50, 450], style=TableStyle([
    ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ('BACKGROUND', (0, 0), (0, 0), colors.grey),
    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
]))
flowables.append(dns_table)
flowables.append(Spacer(1, 12))

# Sous-section 1.4 Email and Social Media
email_social_title = "1.4 Email and Social Media"
email_social_heading = Paragraph(email_social_title, styles['Heading2'])
flowables.append(email_social_heading)
email_data = [["Emails Found", Paragraph(", ".join(report_data["Email Found"]), styles['BodyText'])]]
social_links_data = [["Social Media Links", Paragraph(", ".join(report_data["Social Media Links"]), styles['BodyText'])]]
email_table = Table(email_data, colWidths=[150, 350], style=TableStyle([
    ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ('BACKGROUND', (0, 0), (0, 0), colors.grey),
    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
]))
social_links_table = Table(social_links_data, colWidths=[150, 350], style=TableStyle([
    ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ('BACKGROUND', (0, 0), (0, 0), colors.grey),
    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
]))
flowables.append(email_table)
flowables.append(Spacer(1, 12))
flowables.append(social_links_table)
flowables.append(Spacer(1, 12))

# Ajouter un titre pour l'exploitation
exploitation_title = "2) Exploitation"
exploitation_heading = Paragraph(exploitation_title, styles['Heading1'])
flowables.append(exploitation_heading)
flowables.append(Spacer(1, 12))

# Vérifier si IP2 et IP3 sont renseignées
if "IP2" in company_data:
    ip_data = [
        ["Selected IPs", ""],  # Titre du tableau en anglais
        ["IP Address 1", company_data["IP1"]],
        ["IP Address 2", company_data["IP2"]]
    ]
    if "IP3" in company_data:
        ip_data.append(["IP Address 3", company_data["IP3"]])

    ip_table = Table(ip_data, style=TableStyle([
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
    ]))
    flowables.append(ip_table)
    flowables.append(Spacer(1, 12))

# Ajouter un titre pour DirBuster
dirbuster_title = "2.1 Directories finder (dirbuster)"
dirbuster_heading = Paragraph(dirbuster_title, styles['Heading2'])
flowables.append(dirbuster_heading)
flowables.append(Spacer(1, 12))

# Vérifier si des résultats de DirBuster sont disponibles
if "dirbuster results" in report_data:
    dirbuster_results = report_data["dirbuster results"]
    for ip, urls in dirbuster_results.items():
        dirbuster_data = [["IP Address", "Discovered Directories"]]
        dirbuster_data.extend([[ip, Paragraph("<br/>".join(urls), styles['BodyText'])]])

        dirbuster_table = Table(dirbuster_data, style=TableStyle([
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ]))
        flowables.append(dirbuster_table)
        flowables.append(Spacer(1, 12))
else:
    # Si aucun résultat de DirBuster n'est disponible
    no_results_text = "No DirBuster results available."
    flowables.append(Paragraph(no_results_text, styles['BodyText']))
    flowables.append(Spacer(1, 12))

# Ajouter un titre pour Web Vulnerability
web_vulnerability_title = "2.2 Web Vulnerability"
web_vulnerability_heading = Paragraph(web_vulnerability_title, styles['Heading2'])
flowables.append(web_vulnerability_heading)
flowables.append(Spacer(1, 12))

# Vérifier si des résultats d'analyse de vulnérabilités Web sont disponibles
if "webparser results" in report_data:
    web_vulnerability_results = report_data["webparser results"]
    for ip, urls in web_vulnerability_results.items():
        web_vulnerability_data = [["IP Address", "Vulnerability Description"]]
        for url, vulnerabilities in urls.items():
            for vulnerability, description in vulnerabilities.items():
                web_vulnerability_data.append([ip, f"{vulnerability}: {description}"])

        web_vulnerability_table = Table(web_vulnerability_data, style=TableStyle([
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ]))
        flowables.append(web_vulnerability_table)
        flowables.append(Spacer(1, 12))
else:
    # Si aucun résultat d'analyse de vulnérabilités Web n'est disponible
    no_results_text = "No Web Vulnerability results available."
    flowables.append(Paragraph(no_results_text, styles['BodyText']))
    flowables.append(Spacer(1, 12))

# Ajouter un titre pour Brute Force FTP
brute_force_ftp_title = "2.3 Brute Force FTP"
brute_force_ftp_heading = Paragraph(brute_force_ftp_title, styles['Heading2'])
flowables.append(brute_force_ftp_heading)
flowables.append(Spacer(1, 12))

# Vérifier si des résultats d'attaque de Brute Force FTP sont disponibles
if "brute_force_results_ftp" in report_data:
    brute_force_ftp_results = report_data["brute_force_results_ftp"]
    brute_force_ftp_data = [["IP Address", "Username", "Password", "Result"]]
    for result in brute_force_ftp_results:
        ip = result.get("ip")
        username = result.get("username", "")
        password = result.get("password", "")
        brute_force_result = result.get("result", "")
        brute_force_ftp_data.append([ip, username, password, brute_force_result])

    brute_force_ftp_table = Table(brute_force_ftp_data, style=TableStyle([
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
    ]))
    flowables.append(brute_force_ftp_table)
    flowables.append(Spacer(1, 12))
else:
    # Si aucun résultat d'attaque de Brute Force FTP n'est disponible
    no_results_text = "No Brute Force FTP results available."
    flowables.append(Paragraph(no_results_text, styles['BodyText']))
    flowables.append(Spacer(1, 12))

# Ajouter un titre pour Brute Force SSH
brute_force_ssh_title = "2.4 Brute Force SSH"
brute_force_ssh_heading = Paragraph(brute_force_ssh_title, styles['Heading2'])
flowables.append(brute_force_ssh_heading)
flowables.append(Spacer(1, 12))

# Vérifier si des résultats d'attaque de Brute Force SSH sont disponibles
if "brute_force_results_ssh" in report_data:
    brute_force_ssh_results = report_data["brute_force_results_ssh"]
    brute_force_ssh_data = [["IP Address", "Username", "Password", "Result"]]
    for result in brute_force_ssh_results:
        ip = result.get("ip")
        username = result.get("username", "")
        password = result.get("password", "")
        brute_force_result = result.get("result", "")
        brute_force_ssh_data.append([ip, username, password, brute_force_result])

    brute_force_ssh_table = Table(brute_force_ssh_data, style=TableStyle([
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
    ]))
    flowables.append(brute_force_ssh_table)
    flowables.append(Spacer(1, 12))
else:
    # Si aucun résultat d'attaque de Brute Force SSH n'est disponible
    no_results_text = "No Brute Force SSH results available."
    flowables.append(Paragraph(no_results_text, styles['BodyText']))
    flowables.append(Spacer(1, 12))


# Titre pour les scans et les vulnérabilités
scan_vuln_title = "3) Scan and Vulnerabilities"
scan_vuln_heading = Paragraph(scan_vuln_title, styles['Heading1'])
flowables.append(scan_vuln_heading)
flowables.append(Spacer(1, 12))

# Parcourir les données et générer le rapport
for ip_address, services in vulnerability_data.items():
    if isinstance(services, dict):  # Vérifier que services est bien un dictionnaire
        # Afficher les détails du système d'exploitation
        os_details = services.get("OS_details", "Not available")
        os_details_heading = Paragraph(f"IP Address: {ip_address} - OS Details: {os_details}", styles['Heading2'])
        flowables.append(os_details_heading)
        flowables.append(Spacer(1, 12))

        # Itérer sur chaque service, inclure tous les ports
        for service, details in services.items():
            if isinstance(details, dict):  # Assurez-vous que les détails sont un dictionnaire
                port = details.get('port', 'Unknown port')
                vulnerabilities = details.get("vulnerabilities", [])
                vulnerabilities_str = ", ".join(set(vulnerabilities)) if vulnerabilities else "No CVE vulnerabilities found"
                service_info = f"<b>Service:</b> {service} (Port {port})<br/><b>Vulnerabilities:</b> {vulnerabilities_str}"
                service_paragraph = Paragraph(service_info, styles['BodyText'])
                flowables.append(service_paragraph)
                flowables.append(Spacer(1, 12))
    else:
        print(f"Expected a dictionary for services, got {type(services)} instead.")

# Enregistrer le PDF
pdf_report.build(flowables)
print("Le rapport PDF a été mis à jour avec les données de Scan and Vulnerabilities.")