import customtkinter
import subprocess
import json
import os
from PIL import Image, ImageTk
import socket
import threading
import time
from CTkMessagebox import CTkMessagebox

# Empêche la résolution automatique de Windows
customtkinter.deactivate_automatic_dpi_awareness()

# Chemin des images et des fichiers
icon_path = os.path.join("penautomate_images", "penautomate.ico")
back_path = os.path.join("penautomate_menu", "pentestreport", "pentestreportscan.py")
json_path = os.path.join("penautomate_menu", "pentestreport", "results", "pentestdata.json")
menu_path = os.path.join("main.py")
pdf_path = os.path.join("pentest_report.pdf")


location_path = os.path.join("penautomate_menu", "pentestreport", "tools", "location.py")
subdomain_path = os.path.join("penautomate_menu", "pentestreport", "tools", "subdomain.py")
dns_path = os.path.join("penautomate_menu", "pentestreport", "tools", "dnsresolve.py")
emailscrapping_path = os.path.join("penautomate_menu", "pentestreport", "tools", "emailscrapping.py")
sm_path = os.path.join("penautomate_menu", "pentestreport", "tools", "socialmedia.py")
dir_path = os.path.join("penautomate_menu", "pentestreport", "tools", "dirbuster.py")
webvuln_path = os.path.join("penautomate_menu", "pentestreport", "tools", "webparser.py")
bftp_path = os.path.join("penautomate_menu", "pentestreport", "tools", "bruteforceftp.py")
bssh_path = os.path.join("penautomate_menu", "pentestreport", "tools", "bruteforcessh.py")
nmap_path = os.path.join("penautomate_menu", "pentestreport", "tools", "scannmap.py")
json2pdf_path = os.path.join("penautomate_menu", "pentestreport", "results", "report_json_2_pdf.py")


# Fenêtre root
root = customtkinter.CTk()
root.geometry("350x350")
root.title("PenAutomate")
root.iconbitmap(icon_path)
root.resizable(width=False, height=False)

# Centre la fenêtre au lancement
root.update_idletasks()
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
window_width = root.winfo_width()
window_height = root.winfo_height()
x_pos = (screen_width - window_width) // 2
y_pos = (screen_height - window_height) // 2
root.geometry("+{}+{}".format(x_pos, y_pos))    

# Importe la configuration du thème Light / Dark depuis le fichier themes.json
with open('themes.json', 'r') as file:
    config = json.load(file)

# Apparence du thème
customtkinter.set_appearance_mode(config["appearance_mode"])
customtkinter.set_default_color_theme("dark-blue")

def menu():
    root.destroy()
    subprocess.run(["python", menu_path])

def launch_report():
    # Liste des chemins des scripts à exécuter en premier
    initial_scripts = [
        location_path, subdomain_path, dns_path, emailscrapping_path, sm_path,
        dir_path, webvuln_path, bftp_path, bssh_path, nmap_path, json2pdf_path
    ]

    # Exécutez chaque script initial et attendez qu'il se termine avant de passer au suivant
    for script in initial_scripts:
        subprocess.Popen(['python', script]).wait()

    # Arrêter la barre de progression à la fin de tous les processus
    progressbar.set(1)
    progressbar.stop()
    
    download_button.pack(pady=5)  # Afficher le bouton de téléchargement après la fin de tous les processus
    menu_button.pack(pady=5)

def start_launch_report_thread():
    progressbar.pack(pady=10, padx=10)
    progressbar.start()

    report_thread = threading.Thread(target=launch_report)
    report_thread.start()


# Frame du menu
frame = customtkinter.CTkFrame(master=root)
frame.pack(fill="y", expand=True, side="top")

# Titre de la frame
label = customtkinter.CTkLabel(master=frame, text="\U0001f47e   Creating Report   \U0001f47e", font=("Lato", 24, "bold"))
label.pack(pady=12, padx=10)

# Description de la frame
label = customtkinter.CTkLabel(master=frame, text="The wait may be longer depending on \nthe number of IP addresses entered \nand the number of features requested.", font=("Lato", 10, "bold"), wraplength=400)
label.pack()

progressbar = customtkinter.CTkProgressBar(master=root, width=500, mode="indeterminate")

# Configuration du bouton
report_button = customtkinter.CTkButton(master=frame, text="Generate Report", command=start_launch_report_thread, font=("Lato", 14, "bold"), fg_color="#22B14C", hover_color="#1A873A")
report_button.pack(pady=50)

# Bouton de téléchargement (initialement non affiché)
def download_report():
    os.startfile(pdf_path)  # Ouvre le fichier PDF avec l'application par défaut

download_button = customtkinter.CTkButton(master=frame, text="Download Report", command=download_report, font=("Lato", 14, "bold"), fg_color="#0052CC", hover_color="#003C9D")

menu_button = customtkinter.CTkButton(master=frame, text="Back to the Menu", command=menu, font=("Lato", 14, "bold"), fg_color="#0052CC", hover_color="#003C9D")


# Main Loop
root.mainloop()
