import requests
from requests import Session
from concurrent.futures import ThreadPoolExecutor
import os
import json

# Functions to handle JSON data
def load_existing_data(filepath):
    try:
        with open(filepath, 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(filepath, data):
    with open(filepath, 'w') as file:
        json.dump(data, file, indent=4)

# Function to check each directory
def check_directory(url, word, found_dirs):
    target_url = url + "/" + word
    try:
        response = requests.get(target_url)
        if response.status_code == 200:
            found_dirs.append(target_url)
            print(f"[+] Directory found: {target_url}")
    except requests.exceptions.RequestException:
        pass  # Ignore failed requests

# Main dirbuster function
def dirbuster(url, wordlist_file, found_dirs, max_workers=100000):
    with open(wordlist_file, 'r') as f:
        wordlist = f.read().splitlines()

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        executor.map(lambda word: check_directory(url, word, found_dirs), wordlist)

# Paths for JSON files
json_input_path = os.path.join("penautomate_menu", "pentestreport", "pentestdata.json")
json_output_path = os.path.join("penautomate_menu", "pentestreport", "pentestreport.json")

# Load IP addresses and prepare to call dirbuster
data = load_existing_data(json_input_path)
ip_addresses = [data.get(f"IP{i}") for i in range(1, 4) if data.get(f"IP{i}")]

# Wordlist file path
wordlist_file = os.path.join("penautomate_menu", "pentestreport", "tools", "wordlists", "directory-list-1.0.txt")

# Existing results from JSON
existing_results = load_existing_data(json_output_path)
if "dirbuster results" not in existing_results:
    existing_results["dirbuster results"] = {}

# Execute dirbuster for each IP address
for ip in ip_addresses:
    found_dirs = []
    print(f"Starting dirbuster for IP: {ip}")
    dirbuster(f"http://{ip}", wordlist_file, found_dirs)
    if found_dirs:
        existing_results["dirbuster results"][ip] = found_dirs

# Save the updated results back to JSON
save_data(json_output_path, existing_results)
