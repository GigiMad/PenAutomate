from scapy.all import srp, Ether, ARP
from threading import Thread, Lock
from socket import socket, AF_INET, SOCK_DGRAM, gethostbyaddr
import netaddr


# Global client list and a lock for thread-safety
clients = []
clients_lock = Lock()

def get_local_ip():
    s = socket(AF_INET, SOCK_DGRAM)
    try:
        s.connect(('10.254.254.254', 1))
        IP = s.getsockname()[0]
    finally:
        s.close()
    return IP

def get_hostname(ip):
    try:
        return gethostbyaddr(ip)[0]
    except:
        return "Unknown"

class Scanner(Thread):
    def __init__(self, ip):
        super().__init__()
        self.ip = ip

    def run(self):
        packet = Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=self.ip)
        result = srp(packet, timeout=3, verbose=0)[0]
        for _, received in result:
            hostname = get_hostname(received.psrc)
            with clients_lock:
                clients.append({
                    "ip": received.psrc,
                    "mac": received.hwsrc,
                    "hostname": hostname
                })

def scan_network(network):
    threads = []
    for ip in netaddr.IPNetwork(network):
        scanner = Scanner(str(ip))
        scanner.start()
        threads.append(scanner)
    
    for thread in threads:
        thread.join()

    for client in clients:
        print(f"IP: {client['ip']}, MAC: {client['mac']}, Hostname: {client['hostname']}")

local_ip = get_local_ip()
network = f"{local_ip}/24"
scan_network(network)
