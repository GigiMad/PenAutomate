import dns.resolver
import json
import os

json_path = os.path.join("penautomate_menu", "pentestreport", "pentestdata.json")
json_output_path = os.path.join("penautomate_menu", "pentestreport", "pentestreport.json")

# Fonctions pour charger et sauvegarder les données
def load_existing_data(filepath):
    try:
        with open(filepath, 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(filepath, data):
    with open(filepath, 'w') as file:
        json.dump(data, file, indent=4)

# Charger le domaine depuis un fichier JSON
data = load_existing_data(json_path)
domain = data.get("Company Domain", "")

# Types de records DNS à résoudre
record_types = ['A', 'AAAA', 'NS', 'CNAME', 'MX', 'PTR', 'SOA', 'TXT']

# Charger les résultats existants
results = load_existing_data(json_output_path)

# Traitement de chaque type de record
for record_type in record_types:
    try:
        answer = dns.resolver.resolve(domain, record_type)
        new_data = [server.to_text() for server in answer]
        # Merge new data to existing data
        if record_type in results:
            results[record_type].extend(new_data)
        else:
            results[record_type] = new_data
    except dns.resolver.NoAnswer:
        continue  # Skip if no answer
    except dns.resolver.NXDOMAIN:
        continue  # Skip if domain does not exist
    except Exception as e:
        continue  # Skip on other exceptions

# Save the results back to JSON
save_data(json_output_path, results)
